(in-package :lbge.math)

(defclass quaternion ()
  ((x :accessor quaternion-z :initarg :x)
   (y :accessor quaternion-y :initarg :y)
   (z :accessor quaternion-z :initarg :z)
   (w :accessor quaternion-w :initarg :w)))

(defun make-quaternion ()
  (make-instance 'quaternion :x 0.0f0 :y 0.0f0 :z 0.0f0 :w 1.0f0))

(defmethod mul ((q1 quaternion) (q2 quaternion))
  (let ((a (* (+ (quaternion-w q1) (quaternion-x q1))
              (+ (quaternion-w q2) (quaternion-x q2))))
        (b (* (- (quaternion-z q1) (quaternion-y q1))
              (- (quaternion-y q2) (quaternion-z q2))))
        (c (* (- (quaternion-x q1) (quaternion-w q1))
              (+ (quaternion-y q2) (quaternion-z q2))))
        (d (* (+ (quaternion-y q1) (quaternion-z q1))
              (- (quaternion-x q2) (quaternion-w q2))))
        (e (* (+ (quaternion-x q1) (quaternion-z q1))
              (+ (quaternion-x q2) (quaternion-y q2))))
        (f (* (- (quaternion-x q1) (quaternion-z q1))
              (- (quaternion-x q2) (quaternion-y q2))))
        (g (* (+ (quaternion-w q1) (quaternion-y q1))
              (- (quaternion-w q2) (quaternion-z q2))))
        (h (* (- (quaternion-w q1) (quaternion-y q1))
              (+ (quaternion-w q2) (quaternion-z q2)))))
    (make-quaternion :x (- a (* 0.5f0 (+ e f g h)))
                     :y (+ (- c) (* 0.5f0 (+ e (- f) g (- h))))
                     :z (+ (- d) (* 0.5f0 (+ e (- f) (- g) h)))
                     :w (+ b (* 0.5f0 (+ (- e) (- f) g h))))))

(defmethod mul ((v float3) (q quaternion))
  (let* ((q-v (make-float3 (quaternion-x q) (quaternion-y q) (quaternion-z q)))
         (c (mul (cross q-v v) 2.0f0)))
    (add v (add (mul c (quaternion-w q)) (cross q-v c)))))
